name: vprofile CICD Workflow

env:
  ECR_REPOSITORY: 'vprofile-appimage'

permissions:
  contents: read

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Maven Build
        run: mvn clean install
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: target/*.war
      
      - name: Notify if Build fails
        if: failure()
        run: echo "Build failed! Please check the logs."

  Test:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: code checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Run Test on Main branches
        if: github.ref == 'refs/heads/main'
        run: mvn test

      - name: check style
        if: github.ref == 'refs/heads/main'
        run: mvn checkstyle:checkstyle

      - name: Run test on Other branches
        if: github.ref != 'refs/heads/main'
        run: echo "Tests are skipped on non-main branches."

  Security-Scan:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy File System Scan on Main branches
        if: github.ref == 'refs/heads/main'
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          format: json
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library
          output: trivy-report.json
      
      - name: Upload Trivy Report
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
    
  Build-and-Push-Docker-Image:
    runs-on: ubuntu-latest
    enviroment: CiCD_Practise
    needs: [Build, Test, Security-Scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: code checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configre AWS Creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ vsrs.AWS_REGION }}
          
      - name: Login to Amazon ECR
        # to get output for next step must configre id
        id: login-ecr  
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          Image_Tag: ${{ github.sha }}
        run: |
          docker build -f Docker-files/app/multistage/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$Image_Tag .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$Image_Tag
          echo "Docker image = $ECR_REGISTRY/$ECR_REPOSITORY:$Image_Tag" >> $GITHUB_OUTPUT